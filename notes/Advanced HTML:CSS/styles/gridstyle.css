@import url('reset.css');

html,
body {
  box-sizing: border-box;
  background: #f5f5f5;
}

img,
.grid-container,
li {
  display: block;
  /* We want everything in one column on mobile */
}

img {
  width: 100%;
  height: auto;
}

/*==========  Mobile First Method  ==========*/

/* Custom, iPhone Retina */

@media only screen and (min-width: 320px) {}

/* Small Devices, Tablets */
@media only screen and (min-width: 768px) {}

/* Medium Devices, Desktops */
@media only screen and (min-width: 992px) {

  /* CSS Grid Layout is the most powerful layout system and a purely visual tool. Define your own two-dimensional grid in both rows and columns. Over 86% browser support worldwide. */

  /* Example 1 */

  .grid-container {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    /* Fr is a fractional unit and 1fr is for 1 part of the available space */
    grid-gap: 0.5rem 1rem;
    /* Use zero for no gap */
    grid-auto-rows: 1fr;
  }

  /* Example 2 */

  .grid-container {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-gap: 0.5rem 1rem;
    grid-auto-rows: minmax(150px, auto);
  }

  /* The :nth-child() CSS pseudo-class matches elements based on their position in a group of siblings. In this example, we target the images in the HTML list order and place them in a specific column and row or range of columns and rows based on the grid lines. */

  li:nth-child(1) {
    grid-column: 2/3;
    /* The first image is placed between the 2nd and 3rd grid column lines */
    grid-row: 1/2;
    /* The first image is placed between the 1st and 2nd grid row lines */
  }

  li:nth-child(2) {
    grid-column: 4/5;
    grid-row: 1/2;
  }

  li:nth-child(3) {
    grid-column: 3/4;
    grid-row: 2/3;
  }

  li:nth-child(4) {
    grid-column: 1/2;
    grid-row: 4/5;
  }

}